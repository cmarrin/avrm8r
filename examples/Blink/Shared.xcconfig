//
//  Shared.xcconfig
//  libm8r
//
//  Created by Chris Marrin on 2/27/14.
//
//

// Look up the Arduino serial port in /dev. It should be tty.usbserial-xxx.
AVRDUDE_PORT_DRAGON = usb
AVRDUDE_PORT_STK500 = /dev/cu.usbserial
AVRDUDE_PORT_ARDUINO = /dev/tty.usbserial-AD02CUJ5

AVRDUDE_PROGRAMMER_DRAGON = dragon_isp
AVRDUDE_PROGRAMMER_STK500 = stk500v1
AVRDUDE_PROGRAMMER_ARDUINO = arduino

// Dragon uses usb directly, so doesn't need a baud rate, not sure about STK500
AVRDUDE_BAUD_RATE_DRAGON = 0
AVRDUDE_BAUD_RATE_STK500 = 0
AVRDUDE_BAUD_RATE_ARDUINO = 115200

AVRDUDE_PORT = $(AVRDUDE_PORT_$AVRDUDE_DEVICE)
AVRDUDE_PROGRAMMER = $(AVRDUDE_PROGRAMMER_$AVRDUDE_DEVICE)
AVRDUDE_BAUD_RATE = $(AVRDUDE_BAUD_RATE_$AVRDUDE_DEVICE)

GCC_FLAGS = -Wa,-alh -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -ffunction-sections -fdata-sections -finline-limit=10 -fno-inline-small-functions -ffreestanding -mcall-prologues -Wall
LINK_FLAGS = -Wa,-adhlns=$(DERIVED_FILE_DIR)/$(INPUT_FILE_BASE).lst,-gstabs 

INSTALL_DIR = $(USER_LIBRARY_DIR)/Marrinator
M8R_SRC_DIR = $(M8R_DIR)/src
M8R_HDR_DIR = $(M8R_DIR)/include
TOOLS_DIR = /usr/local/CrossPack-AVR
TUXGRAPHICS_DIR = $(M8R_DIR)/eth_tcp_client_server-dhcp-5.1

// This determines which Arduino board pinouts you are using. Possible values are:
//
//  standard
//  mega
//  micro
//  leonardo
//  ethernet
//  eightanaloginputs
//  robot_control
//  robot_motor
ARDUINO_VARIANT = standard

ARDUINO = 100
ARDUINO_FLAGS = -DARDUINO=$ARDUINO -fno-strict-aliasing
ARDUINO_DIR = $(M8R_DIR)/arduino
ARDUINO_CORE_DIR = $ARDUINO_DIR/hardware/arduino/cores/arduino
ARDUINO_LIB_DIR = $ARDUINO_DIR/libraries
ARDUINO_VAR_DIR = $ARDUINO_DIR/hardware/arduino/variants/$ARDUINO_VARIANT
ARDUINO_LIB_INCLUDES = -I$ARDUINO_LIB_DIR/Wire/utility
ARDUINO_INCLUDES = -include Arduino.h -I$ARDUINO_CORE_DIR -I$ARDUINO_LIB_DIR -I$ARDUINO_VAR_DIR $ARDUINO_LIB_INCLUDES

CINCLUDE = -I. -I$M8R_SRC_DIR -I$M8R_HDR_DIR -I$TUXGRAPHICS_DIR $ARDUINO_INCLUDES
CFLAGS = $GCC_FLAGS $ARDUINO_FLAGS $LINK_FLAGS

// Optimization level, can be [0, 1, 2, 3, s]. 
//     0 = turn off optimization. s = optimize for size.
//     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = s

LDFLAGS = -L$(INSTALL_DIR) -lm8r -Wl,-gc-sections -Wl,--relax -Wl,-Map=$(BUILT_PRODUCTS_DIR)/$(TARGET_NAME).map,--cref

